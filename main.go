package main

import (
	"fmt"
	"githubtxt/file"
	"githubtxt/log"
	"githubtxt/repo"
	"githubtxt/utils"
	"os"
)

func main() {
	startTime := utils.StartTimer()

	// –°–æ–∑–¥–∞—ë–º –ª–æ–≥-—Ñ–∞–π–ª
	logFile := log.CreateLogFile()
	defer logFile.Close()

	multiWriter := log.SetupLogger(logFile)

	repoURL := utils.GetRepoURL(multiWriter)
	if repoURL == "" {
		fmt.Fprintln(multiWriter, "üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
		return
	}

	repoName := utils.GetRepoNameFromURL(repoURL)
	savePath := utils.GetSavePath(repoName)
	repoPath := utils.GetRepoPath(savePath)

	if err := os.RemoveAll(repoPath); err != nil {
		fmt.Fprintln(multiWriter, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", err)
		return
	}

	// –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	repo.CloneRepo(repoURL, repoPath, multiWriter)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
	file.ProcessFiles(repoPath, savePath, multiWriter)

	// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	repo.CleanupRepo(repoPath, multiWriter)

	utils.PrintExecutionTime(startTime, multiWriter)
}
