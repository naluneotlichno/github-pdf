package main

import (
	"fmt"
	"os"

	"githubtxt/file"
	"githubtxt/log"
	"githubtxt/repo"
	"githubtxt/utils"
)

func main() {
	mainTimer := utils.StartTimer()

	logFile := log.CreateLogFile()
	defer logFile.Close()
	multiWriter := log.SetupLogger(logFile)

	repoURL := utils.GetRepoURL(multiWriter)
	if repoURL == "" {
		fmt.Fprintln(multiWriter, "üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
		return
	}

	repoName := utils.GetRepoNameFromURL(repoURL)
	savePath := utils.GetSavePath(repoName)	
	repoPath := utils.GetRepoPath(savePath)

	if err := os.RemoveAll(repoPath); err != nil {
		fmt.Fprintln(multiWriter, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", err)
		return
	}

	// –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	cloneTimer := utils.StartTimer()
	repo.CloneRepo(repoURL, repoPath, multiWriter)
	cloneTimer.PrintElapsedTime("–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", multiWriter)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	processTimer := utils.StartTimer()
	file.ProcessFiles(repoPath, savePath, multiWriter)
	processTimer.PrintElapsedTime("–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤", multiWriter)

	// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	cleanupTimer := utils.StartTimer()
	repo.CleanupRepo(repoPath, multiWriter)
	cleanupTimer.PrintElapsedTime("—É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", multiWriter)

	mainTimer.PrintElapsedTime("–≤—Å–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã", multiWriter)
}
