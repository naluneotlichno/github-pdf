package repo

import (
	"fmt"
	"os"
	"os/exec"
	"io"
)

// CloneRepo –∫–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
func CloneRepo(repoURL, repoPath string, log io.Writer) {
	fmt.Fprintln(log, "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")

	cmd := exec.Command("git", "clone", "--depth=1", "--filter=blob:none", repoURL, repoPath)
	cmd.Stdout = log
	cmd.Stderr = log
	if err := cmd.Run(); err != nil {
		fmt.Fprintln(log, "–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", err)
	}
}

// CleanupRepo —É–¥–∞–ª—è–µ—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
func CleanupRepo(repoPath string, log io.Writer) {
	if err := os.RemoveAll(repoPath); err != nil {
		fmt.Fprintln(log, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:", err)
	} else {
		fmt.Fprintln(log, "üìÇ –ü–∞–ø–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
	}
}
