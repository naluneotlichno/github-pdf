package utils

import (
	"bufio"
	"fmt"
	"io"            
	"os"            
	"path/filepath" 
	"strings"
)

// GetRepoURL –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func GetRepoURL(log io.Writer) string {
	fmt.Fprint(log, "\n–í–≤–µ–¥–∏—Ç–µ URL GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
	reader := bufio.NewReader(os.Stdin)
	repoURL, _ := reader.ReadString('\n')
	return strings.TrimSpace(repoURL)
}

// GetRepoNameFromURL –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func GetRepoNameFromURL(url string) string {
	parts := strings.Split(url, "/")
	if len(parts) > 1 {
		return strings.TrimSuffix(parts[len(parts)-1], ".git")
	}
	return ""
}

// GetSavePath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≤ –∫–æ—Ç–æ—Ä—É—é —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ñ–∞–π–ª—ã
func GetSavePath(repoName string) string {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err)
		os.Exit(1)
	}
	return filepath.Join(homeDir, "Desktop", repoName)
}

// GetRepoPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
func GetRepoPath(savePath string) string {
	return filepath.Join(savePath, "repo")
}

// InitRepo –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func InitRepo(log io.Writer) (repoURL, savePath, repoPath string, err error) {
	repoURL = GetRepoURL(log)
	if repoURL == "" {
		fmt.Fprintln(log, "–í–≤–µ–¥–∏—Ç–µURL GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")
		return "", "", "", nil
	}

	repoName := GetRepoNameFromURL(repoURL)
	savePath = GetSavePath(repoName)
	repoPath = GetRepoPath(savePath)

	if err := os.RemoveAll(repoPath); err != nil {
		return "", "", "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–ñ %w", err)
	}

	return repoURL, savePath, repoPath, nil
}

// HandleErrorRetry –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
func HandleErrorRetry(action func() error, msg string, log io.Writer, retry bool) {
	for {
		err := action()
		if err == nil {
			break
		}

		fmt.Fprintln(log, "‚ùå", msg, ":", err)

		if retry {
			fmt.Fprintln(log, "üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
			continue
		} else {
			fmt.Fprintln(log, "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
			os.Exit(1)
		}
	}
}
